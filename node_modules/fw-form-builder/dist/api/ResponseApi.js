"use strict";

/**
 * FormBuilder
 * FormBuilder API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
var ApiClient = require("../ApiClient");

var ChannelRequest = require('../model/ChannelRequest');

var Error = require('../model/Error');

var FormQueryResponse = require('../model/FormQueryResponse');

var InlineResponse200 = require('../model/InlineResponse200');

var RecordCount = require('../model/RecordCount');
/**
* Response service.
* @module api/ResponseApi
* @version 0.0.0-10
*/


module.exports = class ResponseApi {
  /**
  * Constructs a new ResponseApi. 
  * @alias module:api/ResponseApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Fetch all responses for a form
   * Fetch all responses for a form
   * @param {String} uuid Unique Identifier of a Form
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
   */


  getAllResponsesWithHttpInfo(uuid) {
    let postBody = null; // verify the required parameter 'uuid' is set

    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling getAllResponses");
    }

    let pathParams = {
      'uuid': uuid
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Object];
    return this.apiClient.callApi('/forms/{uuid}/responses', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Fetch all responses for a form
   * Fetch all responses for a form
   * @param {String} uuid Unique Identifier of a Form
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
   */


  getAllResponses(uuid) {
    return this.getAllResponsesWithHttpInfo(uuid).then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * Get response count for form
   * Get response count for form
   * @param {String} uuid Unique Identifier of a Form
   * @param {Object} query 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecordCount} and HTTP response
   */


  getResponseCountWithHttpInfo(uuid, query) {
    let postBody = query; // verify the required parameter 'uuid' is set

    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling getResponseCount");
    } // verify the required parameter 'query' is set


    if (query === undefined || query === null) {
      throw new Error("Missing the required parameter 'query' when calling getResponseCount");
    }

    let pathParams = {
      'uuid': uuid
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = RecordCount;
    return this.apiClient.callApi('/forms/{uuid}/responses/count', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get response count for form
   * Get response count for form
   * @param {String} uuid Unique Identifier of a Form
   * @param {Object} query 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecordCount}
   */


  getResponseCount(uuid, query) {
    return this.getResponseCountWithHttpInfo(uuid, query).then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * Add a response for a form
   * Add response for a form
   * @param {String} uuid Unique Identifier of a Form
   * @param {Object} formresponse 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */


  saveResponseWithHttpInfo(uuid, formresponse) {
    let postBody = formresponse; // verify the required parameter 'uuid' is set

    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling saveResponse");
    } // verify the required parameter 'formresponse' is set


    if (formresponse === undefined || formresponse === null) {
      throw new Error("Missing the required parameter 'formresponse' when calling saveResponse");
    }

    let pathParams = {
      'uuid': uuid
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Object;
    return this.apiClient.callApi('/forms/{uuid}/responses', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Add a response for a form
   * Add response for a form
   * @param {String} uuid Unique Identifier of a Form
   * @param {Object} formresponse 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
   */


  saveResponse(uuid, formresponse) {
    return this.saveResponseWithHttpInfo(uuid, formresponse).then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * searchResponse
   * searchResponse
   * @param {String} uuid Unique Identifier of a Form
   * @param {Object} query 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FormQueryResponse} and HTTP response
   */


  searchResponseWithHttpInfo(uuid, query) {
    let postBody = query; // verify the required parameter 'uuid' is set

    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling searchResponse");
    } // verify the required parameter 'query' is set


    if (query === undefined || query === null) {
      throw new Error("Missing the required parameter 'query' when calling searchResponse");
    }

    let pathParams = {
      'uuid': uuid
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = FormQueryResponse;
    return this.apiClient.callApi('/forms/{uuid}/responses/search', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * searchResponse
   * searchResponse
   * @param {String} uuid Unique Identifier of a Form
   * @param {Object} query 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FormQueryResponse}
   */


  searchResponse(uuid, query) {
    return this.searchResponseWithHttpInfo(uuid, query).then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * sendMessage
   * sendMessage
   * @param {module:model/ChannelRequest} channelrequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */


  sendMessageWithHttpInfo(channelrequest) {
    let postBody = channelrequest; // verify the required parameter 'channelrequest' is set

    if (channelrequest === undefined || channelrequest === null) {
      throw new Error("Missing the required parameter 'channelrequest' when calling sendMessage");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = InlineResponse200;
    return this.apiClient.callApi('/messages', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * sendMessage
   * sendMessage
   * @param {module:model/ChannelRequest} channelrequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
   */


  sendMessage(channelrequest) {
    return this.sendMessageWithHttpInfo(channelrequest).then(function (response_and_data) {
      return response_and_data;
    });
  }

};