"use strict";

/**
 * FormBuilder
 * FormBuilder API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
var ApiClient = require("../ApiClient");

var Error = require('../model/Error');

var Form = require('../model/Form');
/**
* Form service.
* @module api/FormApi
* @version 0.0.0-10
*/


module.exports = class FormApi {
  /**
  * Constructs a new FormApi. 
  * @alias module:api/FormApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Create Form
   * Create Form
   * @param {module:model/Form} form Form JSON model for form creation
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Form} and HTTP response
   */


  createFormWithHttpInfo(form) {
    let postBody = form; // verify the required parameter 'form' is set

    if (form === undefined || form === null) {
      throw new Error("Missing the required parameter 'form' when calling createForm");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Form;
    return this.apiClient.callApi('/forms', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Create Form
   * Create Form
   * @param {module:model/Form} form Form JSON model for form creation
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Form}
   */


  createForm(form) {
    return this.createFormWithHttpInfo(form).then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * Delete a form
   * Delete a form
   * @param {String} uuid Unique Identifier of a Form
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  deleteFormWithHttpInfo(uuid) {
    let postBody = null; // verify the required parameter 'uuid' is set

    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling deleteForm");
    }

    let pathParams = {
      'uuid': uuid
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/forms/{uuid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Delete a form
   * Delete a form
   * @param {String} uuid Unique Identifier of a Form
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */


  deleteForm(uuid) {
    return this.deleteFormWithHttpInfo(uuid).then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * Fetch details of a Form
   * Fetch details of a Form
   * @param {String} uuid Unique Identifier of a Form
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Form} and HTTP response
   */


  getFormWithHttpInfo(uuid) {
    let postBody = null; // verify the required parameter 'uuid' is set

    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling getForm");
    }

    let pathParams = {
      'uuid': uuid
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Form;
    return this.apiClient.callApi('/forms/{uuid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Fetch details of a Form
   * Fetch details of a Form
   * @param {String} uuid Unique Identifier of a Form
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Form}
   */


  getForm(uuid) {
    return this.getFormWithHttpInfo(uuid).then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * Fetch list of forms for the account
   * Fetch list of forms for the account
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Form>} and HTTP response
   */


  getFormsWithHttpInfo() {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Form];
    return this.apiClient.callApi('/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Fetch list of forms for the account
   * Fetch list of forms for the account
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Form>}
   */


  getForms() {
    return this.getFormsWithHttpInfo().then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * Upadte details of a Form
   * Update details of a Form
   * @param {String} uuid Unique Identifier of a Form
   * @param {module:model/Form} form 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Form} and HTTP response
   */


  updateFormWithHttpInfo(uuid, form) {
    let postBody = form; // verify the required parameter 'uuid' is set

    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling updateForm");
    } // verify the required parameter 'form' is set


    if (form === undefined || form === null) {
      throw new Error("Missing the required parameter 'form' when calling updateForm");
    }

    let pathParams = {
      'uuid': uuid
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Form;
    return this.apiClient.callApi('/forms/{uuid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Upadte details of a Form
   * Update details of a Form
   * @param {String} uuid Unique Identifier of a Form
   * @param {module:model/Form} form 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Form}
   */


  updateForm(uuid, form) {
    return this.updateFormWithHttpInfo(uuid, form).then(function (response_and_data) {
      return response_and_data;
    });
  }

};