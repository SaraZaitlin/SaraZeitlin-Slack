"use strict";

/**
 * FormBuilder
 * FormBuilder API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
var ApiClient = require("../ApiClient");

var Error = require('../model/Error');
/**
* Configs service.
* @module api/ConfigsApi
* @version 0.0.0-10
*/


module.exports = class ConfigsApi {
  /**
  * Constructs a new ConfigsApi. 
  * @alias module:api/ConfigsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Fetch configs for the account
   * Fetch configs for the account
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */


  getConfigWithHttpInfo() {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Object;
    return this.apiClient.callApi('/configs', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Fetch configs for the account
   * Fetch configs for the account
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
   */


  getConfig() {
    return this.getConfigWithHttpInfo().then(function (response_and_data) {
      return response_and_data;
    });
  }
  /**
   * Store configs for an app
   * Create/Update Configs for an app
   * @param {Object} configs App config model for storing the configs
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */


  saveConfigWithHttpInfo(configs) {
    let postBody = configs; // verify the required parameter 'configs' is set

    if (configs === undefined || configs === null) {
      throw new Error("Missing the required parameter 'configs' when calling saveConfig");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Object;
    return this.apiClient.callApi('/configs', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Store configs for an app
   * Create/Update Configs for an app
   * @param {Object} configs App config model for storing the configs
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
   */


  saveConfig(configs) {
    return this.saveConfigWithHttpInfo(configs).then(function (response_and_data) {
      return response_and_data;
    });
  }

};